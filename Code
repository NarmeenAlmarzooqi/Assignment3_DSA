# This class represents a social media post with properties for date and time, the post content, views, and author.
class SocialMediaPost:
    def __init__(self, datetime, post, views, author):
        self.datetime = datetime  # the date and time when the post was made
        self.post = post  # the content of the post
        self.views = views  # how many views the post has
        self.author = author  # who made the post

# a dictionary acting as our hash table for quick look-up of posts by datetime
hash_table = {}

# function to add a post to the hash table
def add_post(post):
    hash_table[post.datetime] = post  # the post's datetime is the key, the post object is the value

# function to find a post by datetime
def find_post_by_datetime(datetime):
    return hash_table.get(datetime, None)  # returns the post if found, or None if not found


# This class represents a node within the binary search tree, holding a social media post.
class BSTNode:
    def __init__(self, post):
        self.post = post  # the social media post this node represents
        self.left = None  # reference to the left child node in the bst
        self.right = None  # reference to the right child node in the bst

# This class represents the binary search tree itself.
class BinarySearchTree:
    def __init__(self):
        self.root = None  # the root node of the tree, starts as None

    # function to insert a new post into the tree
    def insert(self, post):
        if self.root is None:
            self.root = BSTNode(post)  # if tree is empty, the post becomes the root
        else:
            self._insert(self.root, post)  # otherwise, start the recursive insertion process

    # recursive function to insert a node in the correct location
    def _insert(self, node, post):
        if post.datetime < node.post.datetime:  # if post is earlier, go left
            if node.left is None:
                node.left = BSTNode(post)  # if no left child, this post becomes the left child
            else:
                self._insert(node.left, post)  # otherwise, recurse into the left subtree
        else:  # if post is same time or later, go right
            if node.right is None:
                node.right = BSTNode(post)  # if no right child, this post becomes the right child
            else:
                self._insert(node.right, post)  # otherwise, recurse into the right subtree

    # function to find all posts within a certain datetime range
    def find_posts_in_range(self, start_datetime, end_datetime):
        posts = []  # list to hold all posts within the range
        self._find_posts_in_range(self.root, start_datetime, end_datetime, posts)  # start the recursive search
        return posts  # return the list of posts found

    # recursive function to traverse the tree and find posts in the datetime range
    def _find_posts_in_range(self, node, start_datetime, end_datetime, posts):
        if node is not None:  # if the node exists
            if start_datetime <= node.post.datetime <= end_datetime:  # if the post's datetime is in range
                posts.append(node.post)  # add the post to the list
            # recurse to search the left and right subtrees
            self._find_posts_in_range(node.left, start_datetime, end_datetime, posts)
            self._find_posts_in_range(node.right, start_datetime, end_datetime, posts)

