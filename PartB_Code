# This class represents a social media post with properties for date and time, the post content, views, and author.
class SocialMediaPost:
    def __init__(self, datetime, post, views, author):
        self.datetime = datetime  # the date and time when the post was made
        self.post = post  # the content of the post
        self.views = views  # how many views the post has
        self.author = author  # who made the post

# a dictionary acting as our hash table for quick look-up of posts by datetime
hash_table = {}

# function to add a post to the hash table
def add_post(post):
    hash_table[post.datetime] = post  # the post's datetime is the key, the post object is the value

# function to find a post by datetime
def find_post_by_datetime(datetime):
    return hash_table.get(datetime, None)  # returns the post if found, or None if not found


# This class represents a node within the binary search tree, holding a social media post.
class BSTNode:
    def __init__(self, post):
        self.post = post  # the social media post this node represents
        self.left = None  # reference to the left child node in the bst
        self.right = None  # reference to the right child node in the bst

# This class represents the binary search tree itself.
class BinarySearchTree:
    def __init__(self):
        self.root = None  # the root node of the tree, starts as None

    # function to insert a new post into the tree
    def insert(self, post):
        if self.root is None:
            self.root = BSTNode(post)  # if tree is empty, the post becomes the root
        else:
            self._insert(self.root, post)  # otherwise, start the recursive insertion process

    # recursive function to insert a node in the correct location
    def _insert(self, node, post):
        if post.datetime < node.post.datetime:  # if post is earlier, go left
            if node.left is None:
                node.left = BSTNode(post)  # if no left child, this post becomes the left child
            else:
                self._insert(node.left, post)  # otherwise, recurse into the left subtree
        else:  # if post is same time or later, go right
            if node.right is None:
                node.right = BSTNode(post)  # if no right child, this post becomes the right child
            else:
                self._insert(node.right, post)  # otherwise, recurse into the right subtree

    # function to find all posts within a certain datetime range
    def find_posts_in_range(self, start_datetime, end_datetime):
        posts = []  # list to hold all posts within the range
        self._find_posts_in_range(self.root, start_datetime, end_datetime, posts)  # start the recursive search
        return posts  # return the list of posts found

    # recursive function to traverse the tree and find posts in the datetime range
    def _find_posts_in_range(self, node, start_datetime, end_datetime, posts):
        if node is not None:  # if the node exists
            if start_datetime <= node.post.datetime <= end_datetime:  # if the post's datetime is in range
                posts.append(node.post)  # add the post to the list
            # recurse to search the left and right subtrees
            self._find_posts_in_range(node.left, start_datetime, end_datetime, posts)
            self._find_posts_in_range(node.right, start_datetime, end_datetime, posts)


import heapq  # import the heapq module for heap operations

# This class wraps around our social media post so we can use it in a max heap.
class MaxHeapObj:
    def __init__(self, post):
        self.post = post  # the social media post

    # this defines the comparison between two heap objects, reversed for max heap functionality
    def __lt__(self, other):
        return self.post.views > other.post.views

# a list that will be treated as a heap
heap = []

# function to add a post to the heap
def add_post_to_heap(post):
    heapq.heappush(heap, MaxHeapObj(post))  # push the post wrapped in a MaxHeapObj onto the heap

# function to get the post with the most views
def get_top_post():
    return heapq.heappop(heap).post if heap else None  # pop the top post off the heap, if it exists

# Adding posts to the heap for test case setup
for post in hash_table.values():
    add_post_to_heap(post)  # this wraps the existing add functionality in a loop for convenience



# Test cases for all
# Hash Table test case

# Adding a specific post.
unique_post = SocialMediaPost('2024-12-02 18:30', 'Enjoying traditional Emirati coffee. #EmiratiCulture', 100, '@local_coffee_lover')
add_post(unique_post)

# Finding the unique post by its datetime.
test_datetime = '2024-12-02 18:30'
found_post = find_post_by_datetime(test_datetime)
assert found_post == unique_post, f"Test Case Failed: Post for datetime {test_datetime} was not found."
print(f"Test Case for Requirement 1: Successfully found the post for datetime {test_datetime}.")


# BST test case

# Inserting posts into the BST.
emirati_day_post = SocialMediaPost('2024-11-30 09:00', 'National Emirati Day coming up! #EmiratiDay', 250, '@emirati_events')
new_year_post = SocialMediaPost('2025-01-01 00:01', 'Happy New Year from Dubai! #DubaiNYE', 500, '@dubai_nightlife')

# These posts would be added as part of the stream, not just for testing
bst = BinarySearchTree()
bst.insert(unique_post)
bst.insert(emirati_day_post)
bst.insert(new_year_post)

# Find posts in the time range of November to December 2024.
start_range = '2024-11-01 00:00'
end_range = '2024-12-31 23:59'
posts_in_range = bst.find_posts_in_range(start_range, end_range)
assert emirati_day_post in posts_in_range, "Test Case Failed: Emirati Day post not found in range."
assert unique_post in posts_in_range, "Test Case Failed: Unique datetime post not found in range."
print(f"Test Case for Requirement 2: Successfully found posts between {start_range} and {end_range}.")


# Heap test case

# Adding posts to the heap.
for post in [unique_post, emirati_day_post, new_year_post]:
    add_post_to_heap(post)

# Retrieving the post with the most views.
top_viewed_post = get_top_post()
assert top_viewed_post == new_year_post, "Test Case Failed: The post with the most views was not retrieved."
print(f"Test Case for Requirement 3: Successfully retrieved the post with the most views: '{top_viewed_post.post}'.")




