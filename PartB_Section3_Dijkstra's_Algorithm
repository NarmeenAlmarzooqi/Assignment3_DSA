# import necessary libraries
import networkx as nx  # used for creating and manipulating graph structures
import matplotlib.pyplot as plt  # used for creating visual plots
import numpy as np  # used for numerical operations
import heapq  # implements a priority queue for Dijkstra's algorithm

# initialize an empty graph
G = nx.Graph()  # create a new, empty graph

# create a dictionary to label the nodes with their corresponding Fortnite locations
node_labels = {
    # each entry corresponds to a node label with the format "node abbreviation": "full location name"
    "jj": "Junk Junction",
    "hh": "Haunted Hills",
    "pp": "Pleasant Park",
    "ll": "Loot Lake",
    "ss": "Snobby Shores",
    "tt": "Tilted Towers",
    "sf": "Shifty Shafts",
    "gg": "Greasy Grove",
    "ff": "Flush Factory",
    "lld": "Lucky Landing",
    "ffd": "Fatal Fields",
    "ssd": "Salty Springs",
    "rr": "Retail Row",
    "llg": "Lonely Lodge",
    "ww": "Wailing Woods",
    "rrs": "Risky Reels",
    "ttm": "Tomato Temple",
    "llk": "Lazy Links",
    "ppm": "Paradise Palms",
}

# create a list of tuples where each tuple contains two nodes and the attributes for the edge between them
edges_with_weights = [
    ("jj", "hh", {"weight": 3, "id": "R1", "name": "Junction-Hills Express"}),
    ("hh", "pp", {"weight": 3, "id": "R2", "name": "Hills-Parkway"}),
    ("pp", "jj", {"weight": 3, "id": "R3", "name": "Park-Junction Loop"}),
    ("ll", "ss", {"weight": 5, "id": "R4", "name": "Lake-Shores Link"}),
    ("ss", "tt", {"weight": 5, "id": "R5", "name": "Shores-Towers Trail"}),
    ("tt", "sf", {"weight": 5, "id": "R6", "name": "Towers-Shafts Route"}),
    ("sf", "ll", {"weight": 5, "id": "R7", "name": "Shafts-Lake Lane"}),
    ("gg", "ff", {"weight": 7, "id": "R8", "name": "Grove-Factory Freeway"}),
    ("ff", "lld", {"weight": 7, "id": "R9", "name": "Factory-Landing Avenue"}),
    ("lld", "ffd", {"weight": 8, "id": "R10", "name": "Landing-Fields Drive"}),
    ("ffd", "ssd", {"weight": 7, "id": "R11", "name": "Fields-Springs Connector"}),
    ("ssd", "gg", {"weight": 8, "id": "R12", "name": "Springs-Grove Road"}),
    ("rr", "llg", {"weight": 8, "id": "R13", "name": "Row-Lodge Link"}),
    ("llg", "ww", {"weight": 8, "id": "R14", "name": "Lodge-Woods Way"}),
    ("ww", "rrs", {"weight": 8, "id": "R15", "name": "Woods-Reels Road"}),
    ("rrs", "ttm", {"weight": 8, "id": "R16", "name": "Reels-Temple Turnpike"}),
    ("ttm", "llk", {"weight": 8, "id": "R17", "name": "Temple-Links Lane"}),
    ("llk", "ppm", {"weight": 8, "id": "R18", "name": "Links-Palms Pathway"}),
    ("jj", "ll", {"weight": 1, "id": "R19", "name": "Junction-Lake Shortcut"}),
    ("tt", "ffd", {"weight": 3, "id": "R20", "name": "Towers-Fields Fast Track"}),
    ("ppm", "rr", {"weight": 8, "id": "R21", "name": "Palms-Row Route"}),
    ("gg", "rr", {"weight": 1, "id": "R22", "name": "Grove-Row Rapid"}),
    ("gg", "ll", {"weight": 1, "id": "R23", "name": "Grove-Lake Express"}),
    ("ttm", "ffd", {"weight": 2, "id": "R24", "name": "Temple-Fields Link"}),
    ("rrs", "lld", {"weight": 2, "id": "R25", "name": "Reels-Landing Road"}),
    ("llk", "ffd", {"weight": 5, "id": "R26", "name": "Links-Fields Lane"}),
    ("llk", "ssd", {"weight": 4, "id": "R27", "name": "Links-Springs Street"}),
    ("ppm", "ssd", {"weight": 2, "id": "R28", "name": "Palms-Springs Speedway"}),
    ("sf", "ssd", {"weight": 2, "id": "R29", "name": "Shafts-Springs Shortcut"}),
    ("jj", "ssd", {"weight": 6, "id": "R30", "name": "Junction-Springs Journey"}),
    ("sf", "ffd", {"weight": 4, "id": "R31", "name": "Shafts-Fields Freeway"}),
    ("sf", "pp", {"weight": 2, "id": "R32", "name": "Shafts-Park Pass"}),
    ("tt", "hh", {"weight": 3, "id": "R33", "name": "Towers-Hills Highway"}),
    ("tt", "pp", {"weight": 3, "id": "R34", "name": "Towers-Parkway"}),
    ("ss", "lld", {"weight": 4, "id": "R35", "name": "Shores-Landing Lane"}),
    ("tt", "lld", {"weight": 4, "id": "R36", "name": "Towers-Landing Track"}),
    ("ss", "hh", {"weight": 3, "id": "R37", "name": "Shores-Hills Road"}),
    ("ss", "jj", {"weight": 4, "id": "R38", "name": "Shores-Junction Drive"}),
    ("ss", "ppm", {"weight": 7, "id": "R39", "name": "Shores-Palms Path"}),
    ("llg", "ff", {"weight": 3, "id": "R40", "name": "Lodge-Factory Freeway"}),
    ("llg", "ss", {"weight": 4, "id": "R41", "name": "Lodge-Shores Link"}),
    ("llg", "jj", {"weight": 8, "id": "R42", "name": "Lodge-Junction Journey"}),
    ("ww", "ff", {"weight": 4, "id": "R43", "name": "Woods-Factory Footpath"}),
    ("ww", "lld", {"weight": 5, "id": "R44", "name": "Woods-Landing Walkway"}),
]

# add nodes to the graph with specified labels
for node_id, label in node_labels.items():
    G.add_node(node_id, label=label)  # adds a node to the graph with a label

# add edges to the graph with specified attributes
for start, end, attrs in edges_with_weights:
    G.add_edge(start, end, **attrs)  # adds an edge between specified nodes with attributes like weight

def dijkstra(graph, start):
    """implements dijkstra's algorithm to find shortest paths from the start node"""
    distances = {node: float('infinity') for node in graph.nodes()}  # sets initial distance to infinity for all nodes
    distances[start] = 0  # sets the distance from the start node to itself as zero
    priority_queue = [(0, start)]  # creates a priority queue and initializes it with the start node

    while priority_queue:
        current_distance, current_node = heapq.heappop(priority_queue)  # removes and returns the node with the smallest distance
        for neighbor, data in graph[current_node].items():
            weight = data['weight']  # retrieves the weight of the edge to the neighbor
            distance = current_distance + weight  # calculates the total distance to the neighbor through the current node
            if distance < distances[neighbor]:  # checks if the calculated distance is less than the previously recorded distance
                distances[neighbor] = distance  # updates the shortest distance to this neighbor
                heapq.heappush(priority_queue, (distance, neighbor))  # adds the neighbor to the priority queue

    return distances  # returns a dictionary of shortest distances from the start node

def run_dijkstra_test(graph, start_node, target_node=None):
    """runs dijkstra's algorithm from a start node and prints distances"""
    distances = dijkstra(graph, start_node)  # runs dijkstra's algorithm to compute shortest paths
    if target_node:
        # prints the shortest distance to a specific target node if provided
        print(f"Shortest distance from {start_node} to {target_node}: {distances[target_node]}")
    else:
        # otherwise, prints all shortest distances from the start node
        print(f"Shortest distances from {start_node}: {distances}")

# running tests to demonstrate functionality
run_dijkstra_test(G, 'jj')  # tests shortest paths from 'jj' to all other nodes
run_dijkstra_test(G, 'jj', 'tt')  # tests shortest path from 'jj' to 'tt' specifically
