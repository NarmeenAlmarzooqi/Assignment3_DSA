# Compute the T statistic for `sample_1` and `sample_2`

# import the necessary libraries
import networkx as nx
import matplotlib.pyplot as plt
import numpy as np
import heapq

# initialize an empty graph
G = nx.Graph()

# create a dictionary to label the nodes with their corresponding Fortnite locations
node_labels = {
    "JJ": "Junk Junction",
    "HH": "Haunted Hills",
    "PP": "Pleasant Park",
    "LL": "Loot Lake",
    "SS": "Snobby Shores",
    "TT": "Tilted Towers",
    "SF": "Shifty Shafts",
    "GG": "Greasy Grove",
    "FF": "Flush Factory",
    "LLD": "Lucky Landing",
    "FFD": "Fatal Fields",
    "SSD": "Salty Springs",
    "RR": "Retail Row",
    "LLG": "Lonely Lodge",
    "WW": "Wailing Woods",
    "RRS": "Risky Reels",
    "TTM": "Tomato Temple",
    "LLK": "Lazy Links",
    "PPM": "Paradise Palms",
}

# create a list of tuples where each tuple contains two nodes and the weight of the edge between them
edges_with_weights = [
    ("JJ", "HH", 3),
    ("HH", "PP", 3),
    ("PP", "JJ", 3),
    ("LL", "SS", 5),
    ("SS", "TT", 5),
    ("TT", "SF", 5),
    ("SF", "LL", 5),
    ("GG", "FF", 7),
    ("FF", "LLD", 7),
    ("LLD", "FFD", 8),
    ("FFD", "SSD", 7),
    ("SSD", "GG", 8),
    ("RR", "LLG", 8),
    ("LLG", "WW", 8),
    ("WW", "RRS", 8),
    ("RRS", "TTM", 8),
    ("TTM", "LLK", 8),
    ("LLK", "PPM", 8),
    ("JJ", "LL", 1),
    ("TT", "FFD", 3),
    ("PPM", "RR", 8),
    ("GG", "RR", 1),
    ("GG", "LL", 1),
    ("TTM", "FFD", 2),
    ("RRS", "LLD", 2),
    ("LLK", "FFD", 5),
    ("LLK", "SSD", 4),
    ("PPM", "SSD", 2),
    ("SF", "SSD", 2),
    ("JJ", "SSD", 6),
    ("SF", "FFD", 4),
    ("SF", "PP", 2),
    ("TT", "HH", 3),
    ("TT", "PP", 3),
    ("SS", "LLD", 4),
    ("TT", "LLD", 4),
    ("SS", "HH", 3),
    ("SS", "JJ", 4),
    ("SS", "PPM", 7),
    ("LLG", "FF", 3),
    ("LLG", "SS", 2),
    ("LLG", "JJ", 8),
    ("WW", "FF", 4),
    ("WW", "LLD", 5),
]

# add nodes and edges to the graph
for node_id, label in node_labels.items():
    G.add_node(node_id, label=label)

for start, end, weight in edges_with_weights:
    G.add_edge(start, end, weight=weight)

# This function uses Dijkstra's algorithm to find the shortest path from a single source node to all other nodes in the graph
def dijkstra(graph, start):
    # Initial distances are set to infinity
    distances = {node: float('infinity') for node in graph.nodes}
    # Distance to the start node is 0
    distances[start] = 0

    # Priority queue to hold nodes to visit, initialized with the start node
    priority_queue = [(0, start)]

    while priority_queue:
        # Pop the node with the smallest distance so far
        current_distance, current_node = heapq.heappop(priority_queue)
        
        # Explore neighbors of the current node
        for neighbor, data in graph[current_node].items():
            weight = data['weight']
            distance = current_distance + weight
            
            # Update the distance if a shorter path is found
            if distance < distances[neighbor]:
                distances[neighbor] = distance
                heapq.heappush(priority_queue, (distance, neighbor))
    
    return distances

# Test case function
def run_dijkstra_test(graph, start_node, target_node=None):
    distances = dijkstra(graph, start_node)
    if target_node:
        print(f"Shortest distance from {start_node} to {target_node}: {distances[target_node]}")
    else:
        print(f"Shortest distances from {start_node}: {distances}")

# Example usage with your graph:
# Assuming 'node_labels' and 'edges_with_weights' are defined as per your graph
G = nx.Graph()
G.add_nodes_from(node_labels.keys())
G.add_weighted_edges_from(edges_with_weights)

# Run the test case from 'JJ' to all nodes
run_dijkstra_test(G, 'JJ')

# Add another test case, for example from 'JJ' to 'TT'
run_dijkstra_test(G, 'JJ', 'TT')
